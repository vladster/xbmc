/*
 *      Copyright (C) 2005-2010 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *  http://www.gnu.org/copyleft/gpl.html
 *
 */

#include "system.h"

#include "CoreAudioAEEventThread.h"
#include "Utils/AEUtil.h"
#include "utils/log.h"
#include "threads/SingleLock.h"

CCoreAudioAEEventThread::CCoreAudioAEEventThread(CCoreAudioAE *engine) :
  m_run     (true  ),
  m_engine  (engine),
  m_thread  (this  )
{
  m_thread.Create();
}

CCoreAudioAEEventThread::~CCoreAudioAEEventThread()
{
  /* tell the thread we are terminating */
  CSingleLock lock(m_lock);
  m_run = false;
  lock.Leave();

  /* trigger the event incase it is blocking */
  Trigger();

  /* wait for the thread to exit */
  m_thread.StopThread(true);
}

void CCoreAudioAEEventThread::Trigger()
{
  CSingleLock lock(m_lockEvent);
  m_event.Set();
}

void CCoreAudioAEEventThread::Run()
{
/*
  this thread has to be VERY careful not to leave m_lock locked
  when m_cbFunc is called, otherwise signals generated by calls
  in the callback function WILL cause a deadlock when the next
  signal signal arrives
*/

  CSingleLock lock(m_lock);
  while(m_run)
  {
    lock.Leave();

    /* wait on the event */
    m_event.Wait();
    lock.Enter();
    if (!m_run)
      return;

    /* fire the callback */
    if(m_engine)
      m_engine->Reinit();
    
    printf("CCoreAudioAEEventThread\n");
    
    /* reset the event */
    CSingleLock lockEvent(m_lockEvent);
    m_event.Reset();
    lockEvent.Leave(); 
  }
}
